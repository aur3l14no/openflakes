#!/usr/bin/env python

import json
import pathlib
import re
from typing import Annotated

import requests_cache
import typer
from tenacity import retry, stop_after_attempt

from lib import l, sh, sh_

CACHIX_NAME = "aur3l14no"
RELEASES = 3
PRERELEASES = 5

l.basicConfig(level=l.INFO)

commit_message = "Update sing-box"
commit_message_detail = ""

s = requests_cache.CachedSession("requests_cache", expire_after=360)


path = pathlib.Path("./pkgs/sing-box/default.nix")


@retry(stop=stop_after_attempt(3))
def fetch_gh_release_ver(is_prerelease=False, count=5):
    """Git latest `n` versions using GitHub API."""
    j = s.get("https://api.github.com/repos/SagerNet/sing-box/releases").json()
    try:
        # tag_name always begins with 'v'
        return [r["tag_name"][1:] for r in j if r["prerelease"] == is_prerelease][
            :count
        ]
    except Exception:
        raise Exception(f"Failed to decode {j[0]}")


def generate_nix(name_ver_pairs):
    """Generate `sing-box/default.nix`
    Return True if updated.
    """
    global commit_message_detail, path
    l.info(f"Generating singbox/default.nix from {name_ver_pairs}")

    header = """
    # Generated by `update_singbox.py`
    pkgs: {
    """
    # origin: https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/tools/networking/sing-box/default.nix
    # override: https://github.com/NixOS/nixpkgs/issues/86349
    body_template = """
    "{name}" = pkgs.sing-box.override {{
        buildGoModule = args:
        pkgs.buildGoModule (args
            // {{
            version = "{version}";
            src = pkgs.fetchFromGitHub {{
                owner = "SagerNet";
                repo = "sing-box";
                rev = "v{version}";
                hash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
            }};
            vendorHash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
            ldflags = ["-X=github.com/sagernet/sing-box/constant.Version={version}"];
            }});
    }};
    """
    footer = """
    }
    """

    content = (
        header
        + "".join(
            [
                body_template.format(name=name, version=ver)
                for (name, ver) in name_ver_pairs
            ]
        )
        + footer
    )
    path.write_text(content)
    sh(f"nix fmt {path}")


def build_and_update_hash(pkg):
    """Build #.pkg. Update hash on failure. Return outPaths."""
    l.info(f"Building {pkg}")

    max_attempts = 3
    for _ in range(0, max_attempts):
        p = sh_(f"nix build .#{pkg} --json")
        if p.returncode != 0:
            try:
                # mismatch error
                specified = re.search(r"specified:\s*(.+)$", p.stderr, re.M).group(1)
                got = re.search(r"got:\s*(.+)$", p.stderr, re.M).group(1)
                content = path.read_text()
                content = content.replace(specified, got, 1)
                path.write_text(content)
                l.info(f"Replaced hash: {specified} -> {got}")
            except Exception:
                # unknown error
                l.error(f"Non-mismatch errors: {p.stderr}")
                break
        else:
            paths = [v for o in json.loads(p.stdout) for v in o["outputs"].values()]
            l.info(f"Build success: {paths}")
            return paths


def commit():
    global commit_message
    l.info(sh("git add -A"))
    l.info(sh(f'git commit -m "{commit_message}" -m "{commit_message_detail}"'))


def main(force_update: Annotated[bool, typer.Option(help="Force update")] = False):
    global commit_message_detail
    # Generate [(name, ver)]
    prereleases = fetch_gh_release_ver(True, PRERELEASES)
    releases = fetch_gh_release_ver(False, RELEASES)
    releases = [r for r in releases if r not in prereleases]
    name_ver_pairs = []
    if PRERELEASES > 0:
        name_ver_pairs.append(("sing-box-pre", prereleases[0]))
    if RELEASES > 0:
        name_ver_pairs.append(("sing-box", releases[0]))
    name_ver_pairs.extend([(f"sing-box-{ver}", ver) for ver in releases])
    name_ver_pairs.extend([(f"sing-box-{ver}", ver) for ver in prereleases])
    # Fix https://github.com/garnix-io/issues/issues/83
    name_ver_pairs = [(name.replace(".", "_"), ver) for (name, ver) in name_ver_pairs]

    # Compare versions
    old_content = path.read_text()
    old_versions = re.findall(r'version = "(.*)"', old_content)
    new_versions = [ver for (_, ver) in name_ver_pairs]
    if old_versions != new_versions or force_update:
        l.info(f"{old_versions}\n->\n{new_versions}")
        commit_message_detail += f"{old_versions}\n->\n{new_versions}"
        generate_nix(name_ver_pairs)
        paths = []
        names = [name for (name, _) in name_ver_pairs]
        for name in names:
            paths.extend(build_and_update_hash(name))
        commit()
        l.info(f"commit: {commit_message_detail}")
        l.info(f"All out paths: {paths}")
    else:
        return False


if __name__ == "__main__":
    typer.run(main)
