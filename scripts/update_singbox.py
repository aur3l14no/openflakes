#!/usr/bin/env python

import json
import pathlib
import re

import requests_cache
from tenacity import retry, stop_after_attempt

from lib import l, sh, sh_

CACHIX_NAME = "aur3l14no"

l.basicConfig(level=l.INFO)

commit_message = "Update sing-box"
commit_message_detail = ""

s = requests_cache.CachedSession("requests_cache", expire_after=360)

header = """
# Generated by `update_singbox.py`
pkgs: {
"""
# origin: https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/tools/networking/sing-box/default.nix
# override: https://github.com/NixOS/nixpkgs/issues/86349
body_template = """
  "sing-box-{version}" = pkgs.sing-box.override {{
    buildGoModule = args:
      pkgs.buildGoModule (args
        // {{
          version = "{version}";
          src = pkgs.fetchFromGitHub {{
            owner = "SagerNet";
            repo = "sing-box";
            rev = "v{version}";
            hash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
          }};
          vendorHash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
          ldflags = ["-X=github.com/sagernet/sing-box/constant.Version={version}"];
        }});
  }};
"""
footer = """
}
"""

path = pathlib.Path("./pkgs/sing-box/default.nix")


@retry(stop=stop_after_attempt(3))
def fetch_gh_release_ver(recent_releases=3, recent_prereleases=5):
    """Git latest `n` versions using GitHub API."""
    j = s.get("https://api.github.com/repos/SagerNet/sing-box/releases").json()
    versions = []
    try:
        versions.extend([r["name"] for r in j if r["prerelease"]][:recent_prereleases])
        for ver in [r["name"] for r in j if not r["prerelease"]][:recent_releases]:
            if ver not in versions:
                versions.append(ver)
        return versions
    except Exception:
        raise Exception(f"Failed to decode {j[0]}")


def generate_nix(versions):
    """Generate `sing-box/default.nix`
    Return True if updated.
    """
    global commit_message_detail, path
    l.info(f"Generating singbox/default.nix from {versions}")
    old_content = path.read_text()
    old_versions = re.findall(r'"sing-box-(.*)"', old_content)
    if old_versions != versions:
        content = (
            header
            + "".join([body_template.format(version=version) for version in versions])
            + footer
        )
        path.write_text(content)
        commit_message_detail += f"{old_versions}\n->\n{versions}"
        return True
    else:
        return False


def build_and_update_hash(pkg):
    """Build #.pkg. Update hash on failure. Return outPaths."""
    l.info(f"Building {pkg}")

    max_attempts = 3
    for n_attempts in range(0, max_attempts):
        p = sh_(f"nix build .#{pkg} --json")
        if p.returncode != 0:
            try:
                # mismatch error
                specified = re.search("specified:\s*(.+)$", p.stderr, re.M).group(1)
                got = re.search("got:\s*(.+)$", p.stderr, re.M).group(1)
                content = path.read_text()
                content = content.replace(specified, got, 1)
                path.write_text(content)
                l.info(f"Replaced hash: {specified} -> {got}")
            except Exception:
                # unknown error
                l.error(f"Non-mismatch errors: {p.stderr}")
                break
        else:
            paths = [v for o in json.loads(p.stdout) for v in o["outputs"].values()]
            l.info(f"Build success: {paths}")
            return paths


def commit():
    global commit_message
    l.info(sh("git add -A"))
    l.info(sh(f'git commit -m "{commit_message}" -m "{commit_message_detail}"'))


def main():
    versions = fetch_gh_release_ver()
    updated = generate_nix(versions)
    paths = []
    if updated:
        pkgs = [f"'\"sing-box-{ver}\"'" for ver in versions]
        for pkg in pkgs:
            paths.extend(build_and_update_hash(pkg))
        l.info(commit_message_detail)
        commit()
    l.info(f"All out paths: {paths}")


if __name__ == "__main__":
    main()
